apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  name: PLACEHOLDER
  namespace: placeholder
  annotations:
    categories: Cloud Provider
    description: The IBM Bucket Operator provides a Kubernetes CRD-Based API to manage the lifecycle of IBM Cloud Object Storage Bucket.
    certified: "false"
    capabilities: Basic Install
    containerImage: PLACEHOLDER
    createdAt: PLACEHOLDER
    support: IBM
    repository: https://github.com/IBM/cos-bucket-operator
    alm-examples: PLACEHOLDER
spec:
  displayName: IBM COS Bucket Operator
  icon:
  # image should be 175x175
  - base64data: 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
    mediatype: image/png
  description: >
    The IBM COS Bucket Operator provides a simple Kubernetes CRD-Based API to provision and manage lifecycle of
    IBM COS Bucket on your Kubernetes cluster. With this operator, 
    you can simply manage cos bucket as part of your Kubernetes 
    application templates and let the operator reconciliation logic ensure that the required COS bucket
    is automatically created and available for your application.

    The IBM Bucket Operator is currently in preview. It will get updated
    as we release new versions of the [upstream repository](https://github.com/IBM/cos-bucket-operator).

    ## Features

    * **Bucket Provisioning** - supports provisioning for bucket for existing IBM Cloud Object Storage service.

    * **Bucket Configuration** - supports Retention and CORS policy for existing bucket.

    * **Bucket Encryption** - supports using Key Protect key for bucket encryption, also support automatic key rotation. Please reference the
    [Key Protec Setup](https://github.com/ibm/cos-bucket-operator#keyprotectSetup) for detail.

    ## Requirements
    
    The operator can be installed on any OLM-enabled Kubernetes cluster with version >= 1.11. 
    It requires [IBM Cloud Operators](https://operatorhub.io/operator/ibmcloud-operator) if using the `bindingFrom` option in the definition spec.
    Otherwise, please input your service credentials in either Kubernetes Secret or Configmap and specify `apiKey`, `resourceInstanceID` and `endpoints` in spec.

    ### Using IBM COS Bucket Operators in stand-alone mode

    After the installation steps, you need to manually create the service credentail in 
    your IBM Cloud COS instance. and then create either Kubernetes Secret or ConfigMap to store these credentials.
    
    * Login to IBM Cloud using ibmcloud login.

    * Create Credential in Cloud Object Storage instance:

        `ibmcloud resource service-key-create <credential_name> Manager --instance-name <cos_instance_name>`

        for example: `ibmcloud resource service-key-create cos4operator Manager --instance-name mycos`

      * Option 1 - Stored in Secret.

          1. Retrieve the Credential, and generate the base64 encoded file (Note - credential_name is from step 1). After the command, you can check if the file `/tmp/mySecret.secrets` is created:
              
            ```
            ibmcloud resource service-key cos4operator | 
            awk '/apikey/ {seen = 1} seen {print}' |  
            awk '{system("bash -c '\''echo -n  "$1" | tr : = '\''"); printf("%s \n",$2)}' > /tmp/myCOSSecret.secrets
            ```
              
          2. Create Secret:

            ```  
            kubectl create secret generic <kubebete_secret_name> --type=Secret --from-env-file=/tmp/myCOSSecret.secrets
            ```

      * Option 2 - Stored in ConfigMap.

          1. Create the data file (Note - the attached command create base64 decoded values as ConfigMap will not decode the value automatically):
       
              ```
              ibmcloud resource service-key cos4operator  | 
              awk '/apikey/ {seen = 1} seen {print}' |  
              awk '{system("bash -c '\''echo -n  "$1" | tr  : = '\''"); system("bash -c '\''echo -n  "$2" |    base64 -i -'\''"); printf("\n")}' >    /tmp/myCOSSecret.secrets
              ```

          2. Create ConfigMap:
    
              ```
              kubectl create configmap  <kubernete_configmap_name>  --from-env-file=/tmp/myCOSSecret.secrets
              ```
  
    * Verify the required info is in the Secret or ConfigMap:

        ```
        kubectl get secret <kubernete_secret_name> -o yaml
        ```
        
      For Example, the data field should look like the following (should contains at least apiKey, endpoints and resource_instance_id)
        
       ```
       data:
           apiKey: c29tZSByYW5kb20gYXBpa2V5IGdlbmVyYXRlZCBieSB5b3UK
           endpoints: aHR0cHM6Ly9jb250cm9sLmNsb3VkLW9iamVjdC1zdG9yYWdlLmNsb3VkLmlibS5jb20vdjIvZW5kcG9pbnRz
           ...
           resource_instance_id: Y3JuOnYxOmJsdWVtaXg6cHVibGljOmNsb3VkLW9iamVjdC1zdG9yYWdlOmdsb2JhbDphLzg5YjdiOWU3OWJmNjFhMDc5MzE3OWYxMzIzMGZkMmJkOjQ5OTQ2M2QxLWUwZTYtNGMxYy04YmQzLTIzOTNhZTRjZTRkZTo6
       ```           

    ### Using IBM Cloud Operators

    After follow the installation steps in the [IBM Cloud Operator](https://operatorhub.io/operator/ibmcloud-operator), 
    You can create an instance of an IBM public cloud service using the following custom resource (change plan:standard to plan:lite if using lite plan):
   
         
        apiVersion: ibmcloud.ibm.com/v1alpha1
        kind: Service
        metadata:
          name: cos4me
        spec:
          externalName: cos4me
          serviceClass: cloud-object-storage
          plan: standard
        
    After creating a service, you can find its status with:

        kubectl get services.ibmcloud 
        NAME           STATUS   AGE
        cos4me         Online   12s

    You can bind to a service with name `cos4me` using the following custom resource:

        
        apiVersion: ibmcloud.ibm.com/v1alpha1
        kind: Binding
        metadata:
          name: cos4me
        spec:
          serviceName: cos4me
          role: Manager
        

    To find the status of your binding, you can run the command:

        kubectl get bindings.ibmcloud 
        NAME        STATUS   AGE
        cos4me      Online   25s
       
    The `Binding` operator generates a secret with the same name as the binding resource and 
        contains service credentials that can be consumed by your application.

        kubectl get secrets
        NAME      TYPE     DATA   AGE                         
        cos4me    Opaque   6      102s                          

    
  keywords: ['IBM','Cloud']
  version: PLACEHOLDER
  maturity: PLACEHOLDER
  maintainers:
  - name: Paolo Dettori
    email: dettori@us.ibm.com
  - name: Yew Huey Liu
    email: yhliu@us.ibm.com  
  - name: Laura Zaihua Luan
    email: luan@us.ibm.com      
  - name: Mandana Vaziri
    email: mvaziri@us.ibm.com
  - name: Lionel Villard
    email: villard@us.ibm.com
  provider:
    name: IBM
  labels:
    name: PLACEHOLDER
  selector:
    matchLabels:
      name: PLACEHOLDER
  links:
  - name: IBM Cloud Object Storage Bucket Operator Project
    url: https://github.com/ibm/cos-bucket-operator
  installModes:
  - type: OwnNamespace
    supported: true
  - type: SingleNamespace
    supported: false
  - type: MultiNamespace
    supported: false
  - type: AllNamespaces
    supported: true
  install:
    strategy: deployment
    spec:
      clusterPermissions:
      - serviceAccountName: PLACEHOLDER
        rules: # PLACEHOLDER
      deployments: 
        - name: # PLACEHOLDER
          spec: 
  customresourcedefinitions:
    owned: # PLACEHOLDER

